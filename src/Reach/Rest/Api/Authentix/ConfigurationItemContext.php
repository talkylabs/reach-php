<?php

/**
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Authentix API
 * Reach Authentix API helps you easily integrate user authentification in your application. The authentification allows to verify that a user is indeed at the origin of a request from your application.  At the moment, the Reach Authentix API supports the following channels:    * SMS      * Email   We are continuously working to add additionnal channels. ## Base URL All endpoints described in this documentation are relative to the following base URL: ``` https://api.reach.talkylabs.com/rest/authentix/v1/ ```  The API is provided over HTTPS protocol to ensure data privacy.  ## API Authentication Requests made to the API must be authenticated. You need to provide the `ApiUser` and `ApiKey` associated with your applet. This information could be found in the settings of the applet. ```curl curl -X GET [BASE_URL]/configurations -H \"ApiUser:[Your_Api_User]\" -H \"ApiKey:[Your_Api_Key]\" ``` ## Reach Authentix API Workflow Three steps are needed in order to authenticate a given user using the Reach Authentix API. ### Step 1: Create an Authentix configuration A configuration is a set of settings used to define and send an authentication code to a user. This includes, for example: ```   - the length of the authentication code,    - the message template,    - and so on... ``` A configuaration could be created via the web application or directly using the Reach Authentix API. This step does not need to be performed every time one wants to use the Reach Authentix API. Indeed, once created, a configuartion could be used to authenticate several users in the future.    ### Step 2: Send an authentication code A configuration is used to send an authentication code via a selected channel to a user. For now, the supported channels are `sms`, and `email`. We are working hard to support additional channels. Newly created authentications will have a status of `awaiting`. ### Step 3: Verify the authentication code This step allows to verify that the code submitted by the user matched the one sent previously. If, there is a match, then the status of the authentication changes from `awaiting` to `passed`. Otherwise, the status remains `awaiting` until either it is verified or it expires. In the latter case, the status becomes `expired`.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Reach\Rest\Api\Authentix;

use Reach\Exceptions\ReachException;
use Reach\ListResource;
use Reach\Options;
use Reach\Values;
use Reach\Version;
use Reach\InstanceContext;
use Reach\Serialize;
use Reach\Rest\Api\Authentix\ConfigurationItem\AuthenticationControlItemList;
use Reach\Rest\Api\Authentix\ConfigurationItem\AuthenticationItemList;


/**
 * @property AuthenticationControlItemList $authenticationControlItems
 * @property AuthenticationItemList $authenticationItems
 * @method \Reach\Rest\Api\Authentix\ConfigurationItem\AuthenticationItemContext authenticationItems(string $authenticationId)
 */
class ConfigurationItemContext extends InstanceContext
    {
    protected $_authenticationControlItems;
    protected $_authenticationItems;

    /**
     * Initialize the ConfigurationItemContext
     *
     * @param Version $version Version that contains the resource
     * @param string $configurationId The identifier of the configuration to be deleted.
     */
    public function __construct(
        Version $version,
        $configurationId
    ) {
        parent::__construct($version);

        // Path Solution
        $this->solution = [
        'configurationId' =>
            $configurationId,
        ];

        $this->uri = '/authentix/v1/configurations/' . \rawurlencode($configurationId)
        .'';
    }

    /**
     * Delete the ConfigurationItemInstance
     *
     * @return bool True if delete succeeds, false otherwise
     * @throws ReachException When an HTTP error occurs.
     */
    public function delete(): bool
    {

        return $this->version->delete('DELETE', $this->uri);
    }


    /**
     * Fetch the ConfigurationItemInstance
     *
     * @return ConfigurationItemInstance Fetched ConfigurationItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function fetch(): ConfigurationItemInstance
    {

        $payload = $this->version->fetch('GET', $this->uri);

        return new ConfigurationItemInstance(
            $this->version,
            $payload,
            $this->solution['configurationId']
        );
    }


    /**
     * Update the ConfigurationItemInstance
     *
     * @param array|Options $options Optional Arguments
     * @return ConfigurationItemInstance Updated ConfigurationItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function update(array $options = []): ConfigurationItemInstance
    {

        $options = new Values($options);

        $data = Values::of([
            'serviceName' =>
                $options['serviceName'],
            'codeLength' =>
                $options['codeLength'],
            'allowCustomCode' =>
                Serialize::booleanToString($options['allowCustomCode']),
            'usedForDigitalPayment' =>
                Serialize::booleanToString($options['usedForDigitalPayment']),
            'defaultExpiryTime' =>
                $options['defaultExpiryTime'],
            'defaultMaxTrials' =>
                $options['defaultMaxTrials'],
            'defaultMaxControls' =>
                $options['defaultMaxControls'],
            'smtpSettingId' =>
                $options['smtpSettingId'],
            'emailTemplateId' =>
                $options['emailTemplateId'],
            'smsTemplateId' =>
                $options['smsTemplateId'],
        ]);

        $payload = $this->version->update('POST', $this->uri, [], $data);

        return new ConfigurationItemInstance(
            $this->version,
            $payload,
            $this->solution['configurationId']
        );
    }


    /**
     * Access the authenticationControlItems
     */
    protected function getAuthenticationControlItems(): AuthenticationControlItemList
    {
        if (!$this->_authenticationControlItems) {
            $this->_authenticationControlItems = new AuthenticationControlItemList(
                $this->version,
                $this->solution['configurationId']
            );
        }

        return $this->_authenticationControlItems;
    }

    /**
     * Access the authenticationItems
     */
    protected function getAuthenticationItems(): AuthenticationItemList
    {
        if (!$this->_authenticationItems) {
            $this->_authenticationItems = new AuthenticationItemList(
                $this->version,
                $this->solution['configurationId']
            );
        }

        return $this->_authenticationItems;
    }

    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws ReachException For unknown subresources
     */
    public function __get(string $name): ListResource
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->$method();
        }

        throw new ReachException('Unknown subresource ' . $name);
    }

    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return InstanceContext The requested resource context
     * @throws ReachException For unknown resource
     */
    public function __call(string $name, array $arguments): InstanceContext
    {
        $property = $this->$name;
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }

        throw new ReachException('Resource does not have a context');
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Reach.Api.Authentix.ConfigurationItemContext ' . \implode(' ', $context) . ']';
    }
}
