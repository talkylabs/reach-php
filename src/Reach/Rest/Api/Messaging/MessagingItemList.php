<?php

/**
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Messaging API
 * Reach SMS API helps you add robust messaging capabilities to your applications.  Using this REST API, you can * send SMS messages * track the delivery of sent messages * schedule SMS messages to send at a later time * retrieve and modify message history
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Reach\Rest\Api\Messaging;

use Reach\Exceptions\ReachException;
use Reach\ListResource;
use Reach\Options;
use Reach\Stream;
use Reach\Values;
use Reach\Version;
use Reach\Serialize;


class MessagingItemList extends ListResource
    {
    /**
     * Construct the MessagingItemList
     *
     * @param Version $version Version that contains the resource
     */
    public function __construct(
        Version $version
    ) {
        parent::__construct($version);

        // Path Solution
        $this->solution = [
        ];

        $this->uri = array(
            'read' => '/messaging/v1/list',
        
            'send' => '/messaging/v1/create',
        );
    }

    /**
     * Reads MessagingItemInstance records from the API as a list.
     * Unlike stream(), this operation is eager and will load `limit` records into
     * memory before returning.
     *
     * @param array|Options $options Optional Arguments
     * @param int $limit Upper limit for the number of records to return. read()
     *                   guarantees to never return more than limit.  Default is no
     *                   limit
     * @param mixed $pageSize Number of records to fetch per request, when not set
     *                        will use the default value of 50 records.  If no
     *                        page_size is defined but a limit is defined, read()
     *                        will attempt to read the limit with the most
     *                        efficient page size, i.e. min(limit, 1000)
     * @return MessagingItemInstance[] Array of results
     */
    public function read(array $options = [], int $limit = null, $pageSize = null): array
    {
        return \iterator_to_array($this->stream($options, $limit, $pageSize), false);
    }

    /**
     * Streams MessagingItemInstance records from the API as a generator stream.
     * This operation lazily loads records as efficiently as possible until the
     * limit
     * is reached.
     * The results are returned as a generator, so this operation is memory
     * efficient.
     *
     * @param array|Options $options Optional Arguments
     * @param int $limit Upper limit for the number of records to return. stream()
     *                   guarantees to never return more than limit.  Default is no
     *                   limit
     * @param mixed $pageSize Number of records to fetch per request, when not set
     *                        will use the default value of 50 records.  If no
     *                        page_size is defined but a limit is defined, stream()
     *                        will attempt to read the limit with the most
     *                        efficient page size, i.e. min(limit, 1000)
     * @return Stream stream of results
     */
    public function stream(array $options = [], int $limit = null, $pageSize = null): Stream
    {
        $limits = $this->version->readLimits($limit, $pageSize);

        $page = $this->page($options, $limits['pageSize']);

        return $this->version->stream($page, $limits['limit'], $limits['pageLimit']);
    }

    /**
     * Retrieve a single page of MessagingItemInstance records from the API.
     * Request is executed immediately
     *
     * @param mixed $pageSize Number of records to return, defaults to 20
     * @param mixed $pageNumber Page Number, this value is simply for client state
     * @return MessagingItemPage Page of MessagingItemInstance
     */
    public function page(
        array $options = [],
        $pageSize = Values::NONE,
        $pageNumber = Values::NONE
    ): MessagingItemPage
    {
        $options = new Values($options);

        $params = Values::of([
            'dest' =>
                $options['dest'],
            'src' =>
                $options['src'],
            'bulkIdentifier' =>
                $options['bulkIdentifier'],
            'sentAt' =>
                Serialize::iso8601DateTime($options['sentAt']),
            'sentAfter' =>
                Serialize::iso8601DateTime($options['sentAfter']),
            'sentBefore' =>
                Serialize::iso8601DateTime($options['sentBefore']),
            'page' => $pageNumber,
            'pageSize' => $pageSize,
        ]);
        

        $baseUrl = $this->version->urlWithoutPaginationInfo($this->version->absoluteUrl($this->uri['read']), $params);
        $response = $this->version->page('GET', $this->uri['read'], $params);

        return new MessagingItemPage($baseUrl, $this->version, $response, $this->solution);
    }

    /**
     * Retrieve a specific page of MessagingItemInstance records from the API.
     * Request is executed immediately
     *
     * @param string $targetUrl API-generated URL for the requested results page
     * @return MessagingItemPage Page of MessagingItemInstance
     */
    public function getPage(string $targetUrl): MessagingItemPage
    {
        $baseUrl = $this->version->urlWithoutPaginationInfo($targetUrl);
        $response = $this->version->getDomain()->getClient()->request(
            'GET',
            $targetUrl
        );

        return new MessagingItemPage($baseUrl, $this->version, $response, $this->solution);
    }


    /**
     * Send the MessagingItemInstance
     *
     * @param string $dest The destination phone number in E.164 format of the message.
     * @param string $src The phone number (in E.164 format), or the alphanumeric sender ID that initiated the message.
     * @param string $body The text of the message to send. It can be up to 1,600 GSM-7 characters in length. That limit varies if your message is not made of only GSM-7 characters. More generally, the message body should not exceed 10 segments.
     * @param array|Options $options Optional Arguments
     * @return MessagingItemInstance Sendd MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function send(string $dest, string $src, string $body, array $options = []): MessagingItemInstance
    {

        $options = new Values($options);

        $data = Values::of([
            'dest' =>
                $dest,
            'src' =>
                $src,
            'body' =>
                $body,
            'bulkIdentifier' =>
                $options['bulkIdentifier'],
            'scheduledTime' =>
                Serialize::iso8601DateTime($options['scheduledTime']),
            'statusCallback' =>
                $options['statusCallback'],
            'maxPrice' =>
                $options['maxPrice'],
            'validityPeriod' =>
                $options['validityPeriod'],
        ]);

        $payload = $this->version->send('POST', $this->uri['send'], [], $data);

        return new MessagingItemInstance(
            $this->version,
            $payload
        );
    }


    /**
     * Constructs a MessagingItemContext
     */
    public function getContext(
        
    ): MessagingItemContext
    {
        return new MessagingItemContext(
            $this->version
        );
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        return '[Reach.Api.Messaging.MessagingItemList]';
    }
}
