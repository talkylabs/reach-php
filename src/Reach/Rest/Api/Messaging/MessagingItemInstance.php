<?php

/**
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Messaging API
 * Reach SMS API helps you add robust messaging capabilities to your applications.  Using this REST API, you can * send SMS messages * track the delivery of sent messages * schedule SMS messages to send at a later time * retrieve and modify message history
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Reach\Rest\Api\Messaging;

use Reach\Exceptions\ReachException;
use Reach\InstanceResource;
use Reach\Values;
use Reach\Version;
use Reach\Deserialize;


/**
 * @property string $appletId
 * @property string $apiVersion
 * @property string $body
 * @property string $dest
 * @property string $src
 * @property string $bulkId
 * @property int $numSegments
 * @property int $numMedia
 * @property string $price
 * @property string $priceUnit
 * @property string $messageId
 * @property string $status
 * @property string $messageType
 * @property int $errorCode
 * @property string $errorMessage
 * @property \DateTime $dateCreated
 * @property \DateTime $dateSent
 * @property \DateTime $dateUpdated
 */
class MessagingItemInstance extends InstanceResource
{
    /**
     * Initialize the MessagingItemInstance
     *
     * @param Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     */
    public function __construct(Version $version, array $payload)
    {
        parent::__construct($version);

        // Marshaled Properties
        $this->properties = [
            'appletId' => Values::array_get($payload, 'appletId'),
            'apiVersion' => Values::array_get($payload, 'apiVersion'),
            'body' => Values::array_get($payload, 'body'),
            'dest' => Values::array_get($payload, 'dest'),
            'src' => Values::array_get($payload, 'src'),
            'bulkId' => Values::array_get($payload, 'bulkId'),
            'numSegments' => Values::array_get($payload, 'numSegments'),
            'numMedia' => Values::array_get($payload, 'numMedia'),
            'price' => Values::array_get($payload, 'price'),
            'priceUnit' => Values::array_get($payload, 'priceUnit'),
            'messageId' => Values::array_get($payload, 'messageId'),
            'status' => Values::array_get($payload, 'status'),
            'messageType' => Values::array_get($payload, 'messageType'),
            'errorCode' => Values::array_get($payload, 'errorCode'),
            'errorMessage' => Values::array_get($payload, 'errorMessage'),
            'dateCreated' => Deserialize::dateTime(Values::array_get($payload, 'dateCreated')),
            'dateSent' => Deserialize::dateTime(Values::array_get($payload, 'dateSent')),
            'dateUpdated' => Deserialize::dateTime(Values::array_get($payload, 'dateUpdated')),
        ];

        $this->solution = [];
    }

    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return MessagingItemContext Context for this MessagingItemInstance
     */
    protected function proxy(): MessagingItemContext
    {
        if (!$this->context) {
            $this->context = new MessagingItemContext(
                $this->version
            );
        }

        return $this->context;
    }

    /**
     * Delete the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be updated.
     * @return bool True if delete succeeds, false otherwise
     * @throws ReachException When an HTTP error occurs.
     */
    public function delete(string $messageId): bool
    {

        return $this->proxy()->delete($messageId);
    }

    /**
     * Fetch the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be updated.
     * @return MessagingItemInstance Fetched MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function fetch(string $messageId): MessagingItemInstance
    {

        return $this->proxy()->fetch($messageId);
    }

    /**
     * Unschedule the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be unscheduled.
     * @return MessagingItemInstance Unscheduled MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function unschedule(string $messageId): MessagingItemInstance
    {

        return $this->proxy()->unschedule($messageId);
    }

    /**
     * Update the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be updated.
     * @param string $body The text to be newly associated with the message.
     * @return MessagingItemInstance Updated MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function update(string $messageId, string $body): MessagingItemInstance
    {

        return $this->proxy()->update($messageId, $body);
    }

    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws ReachException For unknown properties
     */
    public function __get(string $name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }

        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->$method();
        }

        throw new ReachException('Unknown property: ' . $name);
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Reach.Api.Messaging.MessagingItemInstance ' . \implode(' ', $context) . ']';
    }
}

