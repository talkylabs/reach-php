<?php

/**
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Messaging API
 * Reach SMS API helps you add robust messaging capabilities to your applications.  Using this REST API, you can * send SMS messages * track the delivery of sent messages * schedule SMS messages to send at a later time * retrieve and modify message history
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace Reach\Rest\Api\Messaging;

use Reach\Exceptions\ReachException;
use Reach\Values;
use Reach\Version;
use Reach\InstanceContext;


class MessagingItemContext extends InstanceContext
    {
    /**
     * Initialize the MessagingItemContext
     *
     * @param Version $version Version that contains the resource
     */
    public function __construct(
        Version $version
    ) {
        parent::__construct($version);

        // Path Solution
        $this->solution = [
        ];

        $this->uri = array(
            'fetch' => '/messaging/v1/fetch',
        
            'update' => '/messaging/v1/update',
        
            'delete' => '/messaging/v1/delete',
        
            'unschedule' => '/messaging/v1/unschedule',
        );
    }

    /**
     * Delete the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be updated.
     * @return bool True if delete succeeds, false otherwise
     * @throws ReachException When an HTTP error occurs.
     */
    public function delete(string $messageId): bool
    {

        $params = Values::of([
            'messageId' =>
                $messageId,
        ]);

        return $this->version->delete('DELETE', $this->uri['delete'], $params);
    }


    /**
     * Fetch the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be updated.
     * @return MessagingItemInstance Fetched MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function fetch(string $messageId): MessagingItemInstance
    {

        $params = Values::of([
            'messageId' =>
                $messageId,
        ]);

        $payload = $this->version->fetch('GET', $this->uri['fetch'], $params);

        return new MessagingItemInstance(
            $this->version,
            $payload
        );
    }


    /**
     * Unschedule the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be unscheduled.
     * @return MessagingItemInstance Unscheduled MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function unschedule(string $messageId): MessagingItemInstance
    {

        $data = Values::of([
            'messageId' =>
                $messageId,
        ]);

        $payload = $this->version->unschedule('POST', $this->uri['unschedule'], [], $data);

        return new MessagingItemInstance(
            $this->version,
            $payload
        );
    }


    /**
     * Update the MessagingItemInstance
     *
     * @param string $messageId The identifier of the message to be updated.
     * @param string $body The text to be newly associated with the message.
     * @return MessagingItemInstance Updated MessagingItemInstance
     * @throws ReachException When an HTTP error occurs.
     */
    public function update(string $messageId, string $body): MessagingItemInstance
    {

        $data = Values::of([
            'messageId' =>
                $messageId,
            'body' =>
                $body,
        ]);

        $payload = $this->version->update('POST', $this->uri['update'], [], $data);

        return new MessagingItemInstance(
            $this->version,
            $payload
        );
    }


    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "$key=$value";
        }
        return '[Reach.Api.Messaging.MessagingItemContext ' . \implode(' ', $context) . ']';
    }
}
