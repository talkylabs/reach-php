<?php
/**
 * This code was generated by
 *  ___ ___   _   ___ _  _    _____ _   _    _  ___   ___      _   ___ ___      ___   _   ___     ___ ___ _  _ ___ ___    _ _____ ___  ___ 
 * | _ \ __| /_\ / __| || |__|_   _/_\ | |  | |/ | \ / / |    /_\ | _ ) __|___ / _ \ /_\ |_ _|__ / __| __| \| | __| _ \  /_\_   _/ _ \| _ \
 * |   / _| / _ \ (__| __ |___|| |/ _ \| |__| ' < \ V /| |__ / _ \| _ \__ \___| (_) / _ \ | |___| (_ | _|| .` | _||   / / _ \| || (_) |   /
 * |_|_\___/_/ \_\___|_||_|    |_/_/ \_\____|_|\_\ |_| |____/_/ \_\___/___/    \___/_/ \_\___|   \___|___|_|\_|___|_|_\/_/ \_\_| \___/|_|_\
 * 
 * Reach Messaging API
 * Reach SMS API helps you add robust messaging capabilities to your applications.  Using this REST API, you can * send SMS messages * track the delivery of sent messages * schedule SMS messages to send at a later time * retrieve and modify message history
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Reach\Rest\Api\Messaging;

use Reach\Options;
use Reach\Values;

abstract class MessagingItemOptions
{


    /**
     * @param string $dest Retrieve messages sent to only this phone number. The phone number in E.164 format of the message.
     * @param string $src Retrieve messages sent from only this phone number, in E.164 format, or alphanumeric sender ID.
     * @param string $bulkIdentifier Retrieve only messages that are assocaited with this `bulkIdentifier`.
     * @param \DateTime $sentAt Retrieve only messages sent at the specified date. Must be in ISO 8601 format.
     * @param \DateTime $sentAfter Retrieve only messages sent after the specified datetime. Must be in ISO 8601 format.
     * @param \DateTime $sentBefore Retrieve only messages sent before the specified datetime. Must be in ISO 8601 format.
     * @return ReadMessagingItemOptions Options builder
     */
    public static function read(
        
        string $dest = Values::NONE,
        string $src = Values::NONE,
        string $bulkIdentifier = Values::NONE,
        \DateTime $sentAt = null,
        \DateTime $sentAfter = null,
        \DateTime $sentBefore = null

    ): ReadMessagingItemOptions
    {
        return new ReadMessagingItemOptions(
            $dest,
            $src,
            $bulkIdentifier,
            $sentAt,
            $sentAfter,
            $sentBefore
        );
    }

    /**
     * @param string $bulkIdentifier The identifier of the bulk operation this message belongs to.
     * @param \DateTime $scheduledTime The datetime at which the message will be sent. Must be in ISO 8601 format. A message must be scheduled at least 15 min in advance of message send time and cannot be scheduled more than 5 days in advance of the request.
     * @param string $statusCallback The URL that will be called to send status information of your message. If provided, the API POST these message status changes to the URL: `queued`, `failed`, `sent`, `canceled`, `delivered`, or `undelivered`. URLs must contain a valid hostname and underscores are not allowed.
     * @param string $maxPrice The maximum total price in the applet currency that should be paid for the message to be delivered. If the cost exceeds `maxPrice`, the message will fail and a status of `failed` is sent to the status callback.
     * @param int $validityPeriod It represents how long, in seconds, the message can remain in the queue. After this period elapses, the message fails and the status callback is called. After a message has been accepted by a carrier, however, there is no guarantee that the message will not be queued after this period. It is recommended that this value be at least 5 seconds. The maximum allowed value is 14,400 which corresponds to 4 hours.
     * @return SendMessagingItemOptions Options builder
     */
    public static function send(
        
        string $bulkIdentifier = Values::NONE,
        \DateTime $scheduledTime = null,
        string $statusCallback = Values::NONE,
        string $maxPrice = Values::NONE,
        int $validityPeriod = Values::INT_NONE

    ): SendMessagingItemOptions
    {
        return new SendMessagingItemOptions(
            $bulkIdentifier,
            $scheduledTime,
            $statusCallback,
            $maxPrice,
            $validityPeriod
        );
    }



}



class ReadMessagingItemOptions extends Options
    {
    /**
     * @param string $dest Retrieve messages sent to only this phone number. The phone number in E.164 format of the message.
     * @param string $src Retrieve messages sent from only this phone number, in E.164 format, or alphanumeric sender ID.
     * @param string $bulkIdentifier Retrieve only messages that are assocaited with this `bulkIdentifier`.
     * @param \DateTime $sentAt Retrieve only messages sent at the specified date. Must be in ISO 8601 format.
     * @param \DateTime $sentAfter Retrieve only messages sent after the specified datetime. Must be in ISO 8601 format.
     * @param \DateTime $sentBefore Retrieve only messages sent before the specified datetime. Must be in ISO 8601 format.
     */
    public function __construct(
        
        string $dest = Values::NONE,
        string $src = Values::NONE,
        string $bulkIdentifier = Values::NONE,
        \DateTime $sentAt = null,
        \DateTime $sentAfter = null,
        \DateTime $sentBefore = null

    ) {
        $this->options['dest'] = $dest;
        $this->options['src'] = $src;
        $this->options['bulkIdentifier'] = $bulkIdentifier;
        $this->options['sentAt'] = $sentAt;
        $this->options['sentAfter'] = $sentAfter;
        $this->options['sentBefore'] = $sentBefore;
    }

    /**
     * Retrieve messages sent to only this phone number. The phone number in E.164 format of the message.
     *
     * @param string $dest Retrieve messages sent to only this phone number. The phone number in E.164 format of the message.
     * @return $this Fluent Builder
     */
    public function setDest(string $dest): self
    {
        $this->options['dest'] = $dest;
        return $this;
    }

    /**
     * Retrieve messages sent from only this phone number, in E.164 format, or alphanumeric sender ID.
     *
     * @param string $src Retrieve messages sent from only this phone number, in E.164 format, or alphanumeric sender ID.
     * @return $this Fluent Builder
     */
    public function setSrc(string $src): self
    {
        $this->options['src'] = $src;
        return $this;
    }

    /**
     * Retrieve only messages that are assocaited with this `bulkIdentifier`.
     *
     * @param string $bulkIdentifier Retrieve only messages that are assocaited with this `bulkIdentifier`.
     * @return $this Fluent Builder
     */
    public function setBulkIdentifier(string $bulkIdentifier): self
    {
        $this->options['bulkIdentifier'] = $bulkIdentifier;
        return $this;
    }

    /**
     * Retrieve only messages sent at the specified date. Must be in ISO 8601 format.
     *
     * @param \DateTime $sentAt Retrieve only messages sent at the specified date. Must be in ISO 8601 format.
     * @return $this Fluent Builder
     */
    public function setSentAt(\DateTime $sentAt): self
    {
        $this->options['sentAt'] = $sentAt;
        return $this;
    }

    /**
     * Retrieve only messages sent after the specified datetime. Must be in ISO 8601 format.
     *
     * @param \DateTime $sentAfter Retrieve only messages sent after the specified datetime. Must be in ISO 8601 format.
     * @return $this Fluent Builder
     */
    public function setSentAfter(\DateTime $sentAfter): self
    {
        $this->options['sentAfter'] = $sentAfter;
        return $this;
    }

    /**
     * Retrieve only messages sent before the specified datetime. Must be in ISO 8601 format.
     *
     * @param \DateTime $sentBefore Retrieve only messages sent before the specified datetime. Must be in ISO 8601 format.
     * @return $this Fluent Builder
     */
    public function setSentBefore(\DateTime $sentBefore): self
    {
        $this->options['sentBefore'] = $sentBefore;
        return $this;
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Reach.Api.Messaging.ReadMessagingItemOptions ' . $options . ']';
    }
}

class SendMessagingItemOptions extends Options
    {
    /**
     * @param string $bulkIdentifier The identifier of the bulk operation this message belongs to.
     * @param \DateTime $scheduledTime The datetime at which the message will be sent. Must be in ISO 8601 format. A message must be scheduled at least 15 min in advance of message send time and cannot be scheduled more than 5 days in advance of the request.
     * @param string $statusCallback The URL that will be called to send status information of your message. If provided, the API POST these message status changes to the URL: `queued`, `failed`, `sent`, `canceled`, `delivered`, or `undelivered`. URLs must contain a valid hostname and underscores are not allowed.
     * @param string $maxPrice The maximum total price in the applet currency that should be paid for the message to be delivered. If the cost exceeds `maxPrice`, the message will fail and a status of `failed` is sent to the status callback.
     * @param int $validityPeriod It represents how long, in seconds, the message can remain in the queue. After this period elapses, the message fails and the status callback is called. After a message has been accepted by a carrier, however, there is no guarantee that the message will not be queued after this period. It is recommended that this value be at least 5 seconds. The maximum allowed value is 14,400 which corresponds to 4 hours.
     */
    public function __construct(
        
        string $bulkIdentifier = Values::NONE,
        \DateTime $scheduledTime = null,
        string $statusCallback = Values::NONE,
        string $maxPrice = Values::NONE,
        int $validityPeriod = Values::INT_NONE

    ) {
        $this->options['bulkIdentifier'] = $bulkIdentifier;
        $this->options['scheduledTime'] = $scheduledTime;
        $this->options['statusCallback'] = $statusCallback;
        $this->options['maxPrice'] = $maxPrice;
        $this->options['validityPeriod'] = $validityPeriod;
    }

    /**
     * The identifier of the bulk operation this message belongs to.
     *
     * @param string $bulkIdentifier The identifier of the bulk operation this message belongs to.
     * @return $this Fluent Builder
     */
    public function setBulkIdentifier(string $bulkIdentifier): self
    {
        $this->options['bulkIdentifier'] = $bulkIdentifier;
        return $this;
    }

    /**
     * The datetime at which the message will be sent. Must be in ISO 8601 format. A message must be scheduled at least 15 min in advance of message send time and cannot be scheduled more than 5 days in advance of the request.
     *
     * @param \DateTime $scheduledTime The datetime at which the message will be sent. Must be in ISO 8601 format. A message must be scheduled at least 15 min in advance of message send time and cannot be scheduled more than 5 days in advance of the request.
     * @return $this Fluent Builder
     */
    public function setScheduledTime(\DateTime $scheduledTime): self
    {
        $this->options['scheduledTime'] = $scheduledTime;
        return $this;
    }

    /**
     * The URL that will be called to send status information of your message. If provided, the API POST these message status changes to the URL: `queued`, `failed`, `sent`, `canceled`, `delivered`, or `undelivered`. URLs must contain a valid hostname and underscores are not allowed.
     *
     * @param string $statusCallback The URL that will be called to send status information of your message. If provided, the API POST these message status changes to the URL: `queued`, `failed`, `sent`, `canceled`, `delivered`, or `undelivered`. URLs must contain a valid hostname and underscores are not allowed.
     * @return $this Fluent Builder
     */
    public function setStatusCallback(string $statusCallback): self
    {
        $this->options['statusCallback'] = $statusCallback;
        return $this;
    }

    /**
     * The maximum total price in the applet currency that should be paid for the message to be delivered. If the cost exceeds `maxPrice`, the message will fail and a status of `failed` is sent to the status callback.
     *
     * @param string $maxPrice The maximum total price in the applet currency that should be paid for the message to be delivered. If the cost exceeds `maxPrice`, the message will fail and a status of `failed` is sent to the status callback.
     * @return $this Fluent Builder
     */
    public function setMaxPrice(string $maxPrice): self
    {
        $this->options['maxPrice'] = $maxPrice;
        return $this;
    }

    /**
     * It represents how long, in seconds, the message can remain in the queue. After this period elapses, the message fails and the status callback is called. After a message has been accepted by a carrier, however, there is no guarantee that the message will not be queued after this period. It is recommended that this value be at least 5 seconds. The maximum allowed value is 14,400 which corresponds to 4 hours.
     *
     * @param int $validityPeriod It represents how long, in seconds, the message can remain in the queue. After this period elapses, the message fails and the status callback is called. After a message has been accepted by a carrier, however, there is no guarantee that the message will not be queued after this period. It is recommended that this value be at least 5 seconds. The maximum allowed value is 14,400 which corresponds to 4 hours.
     * @return $this Fluent Builder
     */
    public function setValidityPeriod(int $validityPeriod): self
    {
        $this->options['validityPeriod'] = $validityPeriod;
        return $this;
    }

    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString(): string
    {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Reach.Api.Messaging.SendMessagingItemOptions ' . $options . ']';
    }
}



